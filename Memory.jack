// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static array ram;
    static int free_list;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let free_list = HEAP_BASE; #TODO - 2048?
        let free_list.size = HEAP_SIZE; #TODO - 14336?
        let free_list.next = 0;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int cur_seg, prev_seg;
        let cur_seg = free_list;
        let prev_seg = null;
        while ~(cur_seg.next = 0) {
            if (cur_seg.size > (size + 2) | cur_seg.size = (size + 2)) {
                prev_seg.next = cur_seg.next;
                return cur_seg;
            }
            prev_seg = cur_seg;
            cur_seg = cur_seg.next;
        }
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int cur_seg;
        let cur_seg = free_list;
        while ~(cur_seg = 0) {
            cur_seg = cur_seg.next;
        }
        cur_seg = o;
        cur_seg.size = o.size - 2; #TODO decrease size manually?
        cur_seg.next = 0;
    }

    /** Returns the maximal element contained in the given Array/object. */
	function int max(Array o) {
	    var int max_elem, i;
	    let int max_elem = o[0];
	    let i = 0;
	    while (i < o.size) {
	        if (max_elem < o[i]) {
	            max_elem = o[i];
	        }
	        i = i + 1;
	    }
	    return max_elem;
    }
}
